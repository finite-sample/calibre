name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run black code formatting check (informational)
      continue-on-error: true
      run: |
        black --check calibre/ tests/

    - name: Run isort import sorting check (informational)
      continue-on-error: true
      run: |
        isort --check-only calibre/ tests/

    - name: Run flake8 linting (informational)
      continue-on-error: true
      run: |
        flake8 calibre/ tests/ --count --max-complexity=10 --max-line-length=88 --statistics

    - name: Run tests with coverage
      run: |
        pytest --cov=calibre --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build package
      run: |
        python -m build

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import calibre; print(f'Successfully imported calibre v{calibre.__version__}')"

  docs-and-examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install jupyter nbconvert

    - name: Validate notebook execution
      run: |
        jupyter nbconvert --to notebook --execute benchmark.ipynb --output benchmark_executed.ipynb

    - name: Check README syntax
      run: |
        python -c "
        import markdown
        with open('README.md', 'r') as f:
            content = f.read()
        markdown.markdown(content)
        print('README.md syntax is valid')
        "